import { assign, createMachine } from "xstate"

import CONTACTS_WITH_AGES, {
  Contact,
  calculateAge,
  sortByLastName,
} from "@/contacts/CONTACTS"

export const LOCALSTORAGE_KEY_AUTH = "phonebook-filter-by-age"

const phoneBookMachine = createMachine(
  {
    // Following recommended per https://xstate.js.org/docs/guides/actions.html
    predictableActionArguments: true,
    id: "phoneBook",
    // TypeScript types are generated by the XState VSCode extension:
    tsTypes: {} as import("./phoneBookMachine.typegen").Typegen0,
    schema: {
      // The context (extended state) of the finite state machine:
      context: {} as { contacts: Contact[] },
      // The events handled by this fininte state machine:
      events: {} as  // CRUD operations + FINISH + RESET
        | { type: "CREATE"; contact: Contact }
        | {
            type: "READ"
          }
        | { type: "UPDATE"; contact: Contact }
        | { type: "DELETE"; contact: Contact }
        | {
            type: "FINISH"
          }
        | {
            type: "RESET"
          },
    },
    // We start in the "idle" state, expecting a "READ" action to be sent:
    initial: "idle",
    // The initial context (initial state) of the state machine:
    context: {
      contacts: CONTACTS_WITH_AGES as Contact[],
    },
    states: {
      idle: {
        on: {
          READ: {
            target: "ready",
            // Run these actions on state transition via trigger READ:
            actions: ["readPhoneBookFromLocalStorage"],
          },
        },
      },
      ready: {
        on: {
          CREATE: {
            target: "running",
            // Run these actions on state transition via trigger CREATE:
            actions: ["createContact"],
          },
          UPDATE: {
            target: "running",
            // Run these actions on state transition via trigger UPDATE:
            actions: ["updateContact"],
          },
          DELETE: {
            target: "running",
            // Run these actions on state transition via trigger DELETE:
            actions: ["deleteContact"],
          },
          RESET: {
            target: "running",
            // Run these actions on state transition via trigger RESET:
            actions: ["resetPhoneBookEntries"],
          },
        },
      },
      running: {
        on: {
          FINISH: {
            target: "idle",
            // Run these actions on state transition via trigger FINISH:
            actions: ["writePhoneBookToLocalStorage"],
          },
        },
      },
    },
  },
  {
    actions: {
      readPhoneBookFromLocalStorage: assign({
        // We always have to include context and event, even when unused:
        contacts: (context, event) => {
          const localStorageString = localStorage.getItem(LOCALSTORAGE_KEY_AUTH)
          if (localStorageString)
            try {
              const localStorageObject = JSON.parse(
                localStorageString
              ) as Contact[]
              // We sort the phone book entries whenever we load them from disk.
              localStorageObject.sort(sortByLastName)
              return localStorageObject as Contact[]
            } catch (error: any) {
              console.log(error) // Probably a JSON.parse error 😁
            }
          return CONTACTS_WITH_AGES
        },
      }),
      createContact: assign({
        contacts: (context, event) => {
          const currentPhoneBookEntries = context.contacts
          const newContact = event.contact
          // Calculate the age and add it to the object:
          const { birthYear, birthMonth, birthDay } = newContact
          newContact.age = calculateAge({ birthYear, birthMonth, birthDay })
          currentPhoneBookEntries.push(newContact)
          return currentPhoneBookEntries
        },
      }),
      updateContact: assign({
        contacts: (context, event) => {
          const currentPhoneBookEntries = context.contacts
          const updatedContact = event.contact
          const filteredPhoneBookEntries = currentPhoneBookEntries.filter(
            ({ id }) => id !== updatedContact.id
          )
          filteredPhoneBookEntries.push(updatedContact)
          return filteredPhoneBookEntries
        },
      }),
      deleteContact: assign({
        contacts: (context, event) => {
          const currentPhoneBookEntries = context.contacts
          const deletedContact = event.contact
          const filteredPhoneBookEntries = currentPhoneBookEntries.filter(
            ({ id }) => id !== deletedContact.id
          )
          return filteredPhoneBookEntries
        },
      }),
      writePhoneBookToLocalStorage: (context, event) => {
        try {
          localStorage.setItem(
            LOCALSTORAGE_KEY_AUTH,
            JSON.stringify(context.contacts)
          )
        } catch (error: any) {
          console.log(error) // Something went horribly, horribly wrong. 🤯
        }
      },
      resetPhoneBookEntries: assign({
        contacts: (context, event) => CONTACTS_WITH_AGES,
      }),
    },
  }
)

export default phoneBookMachine
